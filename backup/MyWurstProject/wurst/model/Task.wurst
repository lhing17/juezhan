package Task

// standard imports
import HashMap
import HashList
import Event
import ClosureTimers
import TimerUtils

// custom imports
import Common
import Hero
import Award
import ColorUtils
import TriggerClosure

/*
 * Generally, there are three kinds of tasks in the game, including tasks that need player kill creeps, 
 * tasks that need player get some kinds of items, and tasks that need to visit some npcs.
 */

/* task type constants */

public let TASK_TYPE_KILLING = 0

public let TASK_TYPE_COLLECTING = 1

public let TASK_TYPE_VISITING = 2

/* task id constants */

/* task condition type */
public let CONDITION_TYPE_LEVEL = 0

public let CONDITION_TYPE_REPUTATION = 1

public let CONDITION_TYPE_PRACTICE = 2

public interface TaskHandler
    function onCompleteTask(Task whichTask)
    function isCompleted(Task whichTask) returns bool
    function showProgress(Task whichTask)
    function giveAwards(Task whichTask)

public class VisitingNpcHandler implements TaskHandler
    HashList<unit> visitedList = new HashList<unit>()
    override function onCompleteTask(Task whichTask)
        let u = GetTriggerUnit()        
        if whichTask.status == 1
            return
        for ut in whichTask.visitList
            Log.debug(ut.getName() + "与" + u.getName() + "距离：" + ut.getPos().distanceTo(u.getPos()).toString(2))
            if ut.getPos().distanceTo(u.getPos()) <= 400
                visitedList.add(ut)
        if isCompleted(whichTask)
            giveAwards(whichTask)
            whichTask.status = 1
            whichTask.hero.doneTasks.add(whichTask)
            whichTask.hero.ongoingTasks.remove(whichTask)
        else
            showProgress(whichTask)    

    override function isCompleted(Task whichTask) returns bool
        for ui in whichTask.visitList
            if not visitedList.has(ui)
                return false
        return true

    override function showProgress(Task whichTask)
        let p = whichTask.hero.u.getOwner()
        var str = "已拜访NPC："
        for ui in visitedList
            str += ui.getName() + "、"
        printTimedToPlayer(ColorUtils.IN_PROGRESS + str.substring(0, str.length() - 1), 10, p)

    override function giveAwards(Task whichTask)
        HLIterator<Award> iterator = whichTask.awardList.iterator()
        while iterator.hasNext()
            Award award = iterator.next()
            whichTask.hero.addAward(award, true)

/** Handler for collecting item task **/
public class CollectingItemHandler implements TaskHandler
    IterableMap<int, int> collectCounter = new IterableMap<int, int>()
    override function onCompleteTask(Task whichTask)
        let itm = GetManipulatedItem()
        if not whichTask.collectItemMap.hasKey(itm.getTypeId()) or whichTask.status == 1
            return
        Log.debug("From CollectingItemHandler: " + GetTriggerEventId().toIntId().toString())
        if whichTask.virtualItem and GetTriggerEventId() == EVENT_PLAYER_UNIT_PICKUP_ITEM
            if not isCompleted(whichTask) 
                showProgress(whichTask)
                if collectCounter.hasKey(itm.getTypeId())
                    collectCounter.put(itm.getTypeId(), collectCounter.get(itm.getTypeId()) + 1)
                else
                    collectCounter.put(itm.getTypeId(), 1)
        else
            if isCompleted(whichTask)
                giveAwards(whichTask)
                whichTask.status = 1
                whichTask.hero.doneTasks.add(whichTask)
                whichTask.hero.ongoingTasks.remove(whichTask)
            else
                printTimedToPlayer(ColorUtils.IN_PROGRESS + "少侠，你还没有完成任务哦", 15, whichTask.hero.u.getOwner())

    override function isCompleted(Task whichTask) returns bool
        HLIterator<int> iterator = whichTask.collectItemMap.iterator()
        if not whichTask.virtualItem
            collectCounter.flush()
            while iterator.hasNext()
                var key = iterator.next()
                for i = 1 to 6
                    if whichTask.hero.u.itemInSlot(i).getTypeId() == key
                        if collectCounter.hasKey(key)
                            collectCounter.put(key, collectCounter.get(key) + 1)
                        else
                            collectCounter.put(key, 1)
        while iterator.hasNext()
            var key = iterator.next()
            if not collectCounter.hasKey(key) or collectCounter.get(key) < whichTask.collectItemMap.get(key)
                return false
        return true

    override function showProgress(Task whichTask)
        let p = whichTask.hero.u.getOwner()
        HLIterator<int> iterator = whichTask.collectItemMap.iterator()
        while iterator.hasNext()
            var itemId = iterator.next()
            var itemName = GetObjectName(itemId)
            var finishedCount = collectCounter.get(itemId)
            var totalCount = whichTask.killCreepMap.get(itemId)
            printTimedToPlayer(ColorUtils.IN_PROGRESS + itemName + ": " + finishedCount.toString() + " / " + totalCount.toString(), 10, p)

    override function giveAwards(Task whichTask)
        HLIterator<Award> iterator = whichTask.awardList.iterator()
        while iterator.hasNext()
            Award award = iterator.next()
            whichTask.hero.addAward(award, true)

/** Hander for killing creep task **/
public class KillingTaskHandler implements TaskHandler
    IterableMap<int, int> killCounter = new IterableMap<int, int>()
    override function onCompleteTask(Task whichTask)
        let u = GetTriggerUnit()
        // the dying creep id is not in the task killing list.
        if not whichTask.killCreepMap.hasKey(u.getTypeId()) or whichTask.status == 1
            return
        if killCounter.hasKey(u.getTypeId())
            killCounter.put(u.getTypeId(), killCounter.get(u.getTypeId()) + 1)
        else
            killCounter.put(u.getTypeId(), 1)
        if isCompleted(whichTask)
            giveAwards(whichTask)
            whichTask.status = 1
            whichTask.hero.doneTasks.add(whichTask)
            whichTask.hero.ongoingTasks.remove(whichTask)
        else
            showProgress(whichTask)        
        
    /** checks whether the killing task is completed **/
    override function isCompleted(Task whichTask) returns bool
        HLIterator<int> iterator = whichTask.killCreepMap.iterator()
        while iterator.hasNext()
            var key = iterator.next()
            if not killCounter.hasKey(key) or killCounter.get(key) < whichTask.killCreepMap.get(key)
                return false
        return true
    
    /** shows the progress of the killing task **/
    override function showProgress(Task whichTask)
        let p = whichTask.hero.u.getOwner()
        HLIterator<int> iterator = whichTask.killCreepMap.iterator()
        while iterator.hasNext()
            var unitId = iterator.next()
            var unitName = GetObjectName(unitId)
            var finishedCount = killCounter.get(unitId)
            var totalCount = whichTask.killCreepMap.get(unitId)
            printTimedToPlayer(ColorUtils.IN_PROGRESS + unitName + ": " + finishedCount.toString() + " / " + totalCount.toString(), 10, p)
    
    override function giveAwards(Task whichTask)
        HLIterator<Award> iterator = whichTask.awardList.iterator()
        while iterator.hasNext()
            Award award = iterator.next()
            whichTask.hero.addAward(award, true)

    ondestroy
        destroy killCounter

/** the pre-conditions of a task **/
public class TaskCondition
    
    bool condition

    /** If the condition is not met, show the description to the hero **/
    string conditionDescription

    construct(bool condition, string conditionDescription)
        this.condition = condition
        this.conditionDescription = conditionDescription

public class Task
    /** the subject of the task **/
    Hero hero 

    /** the type of the task **/
    int taskType 
    
    /** 0-doing 1-done **/
    int status = 0

    unit taskNpc

    /** the unique identification of different kind of task **/
    int taskId

    /** used as the title in time dialog **/
    string taskName

    /** the description of the task **/
    string taskDescription
    
    /** the pre-conditions of the task **/
    HashList<TaskCondition> conditions

    /** If the task type is killing creep, this field saves the type and number of creeps to kill. **/
    IterableMap<int, int> killCreepMap

    /** If the task type is collecting items, this field saves the type and number of items to collect. **/
    IterableMap<int, int> collectItemMap
    
    /** If the task type is visiting npc, this field saves which position to enter, needs to provide 
     *  `vec2ToIndex` and `vec2FromIndex` functions.
     */
    HashList<unit> visitList   

    /**
     * saves the awards given to the hero if the task is completed.
     */
    HashList<Award> awardList
     
    /** If the task is time-limited, this field tells the time limitation (in seconds). 
     * If the value equals to -1 (default value), it means the task is not time-limited.
     */
    int period = -1
    
    /** the permitted repeat times of the task. If the value equals to -1,
     * it means the task has no repeat times limit.
     */
    int repeatTimes = -1
    
    /** set true if the items need to collect is virtual (not exist in the unit's slot), 
     * a counter will be used to count the virtual items
     */
    boolean virtualItem = false

    /**
     * save the position to perform the task if the task needs a Teleport
     */
    vec2 taskPos = vec2(0, 0)

    /**
     * The handler handles the event that completes the task
     */
    TaskHandler handler
    
    /** listener that listens the task completing event **/
    EventListener listener

    trigger trig

    /** collecting item **/
    construct(Hero hero, int taskType, int taskId, string taskDescription, unit taskNpc, IterableMap<int, int> map, HashList<Award> awardList, TaskHandler handler)
        this.hero = hero
        this.taskType = taskType
        this.taskId = taskId
        this.taskDescription = taskDescription
        this.awardList = awardList
        this.handler = handler
        this.hero.ongoingTasks.add(this) 
        this.taskNpc = taskNpc
        this.collectItemMap = map
        printTimedToPlayer(taskDescription, 15, hero.u.getOwner())
        this.trig = CreateTrigger()
        this.trig.registerUnitInRangeSource(this.taskNpc, 256)
        this.trig.addActionClosure(() -> this.handler.onCompleteTask(this))


    /** killing creep **/
    construct(Hero hero, int taskType, int taskId, string taskDescription, IterableMap<int, int> map, HashList<Award> awardList, TaskHandler handler)
        this.hero = hero
        this.taskType = taskType
        this.taskId = taskId
        this.taskDescription = taskDescription
        this.awardList = awardList
        this.handler = handler
        this.hero.ongoingTasks.add(this) 
        this.killCreepMap = map
        printTimedToPlayer(taskDescription, 15, hero.u.getOwner())
        this.listener = EventListener.add(EVENT_PLAYER_UNIT_DEATH, ()-> handler.onCompleteTask(this))
    
    /** visiting npc **/
    construct(Hero hero, int taskType, int taskId, string taskDescription, HashList<unit> visitList, HashList<Award> awardList, TaskHandler handler)
        this.hero = hero
        this.taskType = taskType
        this.taskId = taskId
        this.taskDescription = taskDescription
        this.awardList = awardList
        this.handler = handler
        this.hero.ongoingTasks.add(this) 
        this.visitList = visitList
        printTimedToPlayer(taskDescription, 15, hero.u.getOwner())
        this.trig = CreateTrigger()
        for u in visitList
            Log.debug(u.getName())
            this.trig.registerUnitInRangeSource(u, 256)
        this.trig.addActionClosure(() -> this.handler.onCompleteTask(this))
            
    function setTaskName(string taskName)
        this.taskName = taskName

    function setPeriod(int period)
        this.period = period
        var t = getTimer()..start(period.toReal(), null)
        var title = "任务倒计时："
        if this.taskName != null
            title = this.taskName + "倒计时："
        var td = CreateTimerDialogBJ(t, title)
        TimerDialogDisplayForPlayerBJ(true, td, this.hero.u.getOwner())
        doAfter(period.toReal()) ->
            if hero.getTask(this.taskId) != null
                printTimedToPlayer(ColorUtils.FAIL +  "时间到，任务失败", 15, this.hero.u.getOwner())
                DestroyTimerDialog(td)
                destroy this

    
    function setRepeatTimes(int repeatTimes)
        this.repeatTimes = repeatTimes
    
    function setTaskPos(vec2 taskPos)
        this.taskPos = taskPos

    function setVirtualItem(bool virtualItem)
        this.virtualItem = virtualItem
        if virtualItem
            this.listener = EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> this.handler.onCompleteTask(this))
    
    ondestroy
        this.hero.ongoingTasks.remove(this)
        destroy this.handler
        destroy listener
        this.trig.destr()

public function evaluateTaskConditions(HashList<TaskCondition> conditions, Hero hero) returns bool
    HLIterator<TaskCondition> iterator = conditions.iterator()
    while iterator.hasNext()
        TaskCondition condition = iterator.next()
        if not condition.condition
            printTimedToPlayer(ColorUtils.WARNING + condition.conditionDescription, 15, hero.u.getOwner())
            return false
    return true

public function evaluateTaskTimes(Hero hero, int taskId) returns bool
    var repeatTimes = 1
    var count = 0
    for task in hero.doneTasks
        if task.taskId == taskId
            repeatTimes = task.repeatTimes
            count ++
    
    if count >= repeatTimes
        printTimedToPlayer(ColorUtils.WARNING + "任务次数已达上限|r", 15, hero.u.getOwner())
        return false
    return true


/** determines whether a hero has certain task **/    
public function Hero.getTask(int taskId) returns Task
    for task in this.ongoingTasks
        if task.taskId == taskId
            return task
    return null

    